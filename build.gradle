/*
 * Copyright 2013-2015 Sergey Ignatov, Alexander Zolotov, Mihai Toader, Florin Patan
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
  id 'org.jetbrains.intellij' version "0.0.6"
  id "de.undercouch.download" version "1.2"
}
version = '0.9.' + System.properties.getProperty('build.number', 'SNAPSHOT')

allprojects {
  apply plugin: 'org.jetbrains.intellij'
  sourceCompatibility = 1.6
  targetCompatibility = 1.6

  intellij {
    version '14.1'
    plugins 'coverage'
  }

  sourceSets {
    main {
      java.srcDirs 'src', 'gen'
      resources.srcDir 'resources'
    }
    test {
      java.srcDir 'tests'
    }
  }
}

dependencies {
  compile project(':utils'), project(':google-app-engine'), project(':google-app-engine-yaml')
}

test {
  maxHeapSize = '512m'
  minHeapSize = '256m'
  enableAssertions = true
  jvmArgs '-XX:MaxPermSize=250m', '-Didea.system.path=system-test', '-Didea.config.path=config-test'

  useJUnit {
    excludeCategories 'com.goide.categories.Performance'
  }
  testLogging {
    exceptionFormat = 'full'
  }
}

task preparePerformanceTestData << {
  downloadAndUnzip('https://storage.googleapis.com/golang/go1.4.2.src.tar.gz', 'go', 'go')
  downloadAndUnzip('https://github.com/docker/docker/archive/v1.5.0.tar.gz', 'docker-1.5.0', 'docker')
}

task performanceTest(type: Test, dependsOn: [classes, testClasses, preparePerformanceTestData]) {
  maxHeapSize = '512m'
  minHeapSize = '256m'
  enableAssertions = true
  jvmArgs '-XX:MaxPermSize=250m', '-Didea.system.path=system-test', '-Didea.config.path=config-test'

  useJUnit {
    includeCategories 'com.goide.categories.Performance'
    reports.html.destination = "$buildDir/reports/performanceTests"
  }
  testLogging {
    exceptionFormat = 'full'
  }
}
check.dependsOn performanceTest

private void downloadAndUnzip(url, sourceDir, targetDir) {
  def testDataPath = "${projectDir}/testData/performance/"
  def markerFile = file("${testDataPath}/${targetDir}/markerFile")
  def tmpPath = "${testDataPath}/tmp/"
  def tar = file("${tmpPath}/${targetDir}.tar.gz")
  if (!markerFile.exists()) {
    download {
      src url
      dest tar
    }
    copy {
      from tarTree(tar)
      into tmpPath
    }
    copy {
      from "${tmpPath}/${sourceDir}"
      into "${testDataPath}/${targetDir}"
    }
    markerFile.createNewFile()
  }
  delete file(tmpPath)
}

// todo: extract to plugin
jar {
  archiveName = 'intellij-go.jar'
  description = "Set plugin version in plugin.xml"
  doFirst {
    sourceSets.main.output.files.each { file ->
      fileTree(file).include("META-INF/plugin.xml").each {
        def pluginXml = new XmlParser().parse(it)
        pluginXml.version.each {
          it.value = version
        }

        def printer = new XmlNodePrinter(new PrintWriter(new FileWriter(it)))
        printer.preserveWhitespace = true
        printer.print(pluginXml)
      }
    }
  }
}

apply plugin: 'distribution'
distZip.dependsOn jar
distributions {
  main {
    baseName = 'Go'
    contents {
      from allprojects.jar.archivePath
      into "/lib"
    }
  }
}